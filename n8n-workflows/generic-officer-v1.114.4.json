{
  "name": "Generic Officer - Discord Bot (v1.114.4)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "vance",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "b8e5c4d1-1234-4567-89ab-cdef01234567",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "vance"
    },
    {
      "parameters": {
        "jsCode": "// Extract data from webhook payload\nconst webhookData = $input.first().json;\nconst payload = webhookData.body;\n\nconst officer = payload.officer || {};\nconst message = payload.message || {};\nconst author = payload.author || {};\nconst config = payload.config || {};\n\n// Make available to next nodes\nreturn {\n  json: {\n    officer: officer,\n    message: message,\n    author: author,\n    config: config,\n    userMessage: message.content || '',\n    userName: author.displayName || 'Unknown',\n    isCommander: author.isCommander || false,\n    channelId: message.channelId || ''\n  }\n};"
      },
      "id": "c9f6d5e2-2345-5678-9abc-def012345678",
      "name": "Extract Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\nconst config = data.config || {};\nconst officer = data.officer || {};\nconst knowledgeBase = config.knowledge_base || {};\nconst personality = config.personality || {};\nconst organization = config.organization || {};\nconst claude = config.claude || {};\n\n// Safe access helpers\nfunction safeGet(obj, path, defaultValue) {\n  const keys = path.split('.');\n  let result = obj;\n  for (const key of keys) {\n    if (result && typeof result === 'object' && key in result) {\n      result = result[key];\n    } else {\n      return defaultValue;\n    }\n  }\n  return result;\n}\n\n// Get knowledge base data safely\nconst scUniverse = knowledgeBase['star-citizen-universe'] || {};\nconst ehaOrg = knowledgeBase['eha-organization'] || {};\nconst systems = scUniverse.systems || {};\nconst missionLocations = scUniverse.mission_locations || {};\n\n// Build list of playable systems\nlet playableSystems = '';\nif (systems) {\n  for (const systemName in systems) {\n    const sys = systems[systemName];\n    if (sys && sys.status === 'playable') {\n      const displayName = systemName.charAt(0).toUpperCase() + systemName.slice(1);\n      playableSystems += '- ' + displayName + ': ' + sys.status + '\\n';\n    }\n  }\n}\n\n// Get Nyx guidelines\nconst nyxGuidelines = safeGet(systems, 'nyx.narrative_guidelines', 'Nyx is not yet accessible');\n\n// Get mission locations\nconst stations = missionLocations.stations || [];\nconst cities = missionLocations.cities || [];\nconst stationsList = stations.slice(0, 5).join(', ');\nconst citiesList = cities.join(', ');\n\n// Get EHA organization info\nconst baseOfOps = safeGet(ehaOrg, 'base_of_operations.primary', 'Stanton System');\nconst currentOp = safeGet(ehaOrg, 'current_operations.operation_crimson_dawn', {});\nconst opName = currentOp.name || 'Operation Crimson Dawn';\nconst opStatus = currentOp.status || 'Active';\n\n// Get personality traits\nconst background = safeGet(personality, 'background', '');\nconst traits = personality.traits || {};\nconst values = personality.values || [];\nconst voice = personality.voice || {};\n\n// Build personality traits section\nlet traitsText = '';\nfor (const key in traits) {\n  const displayKey = key.replace(/_/g, ' ');\n  traitsText += '- ' + displayKey + ': ' + traits[key] + '\\n';\n}\n\n// Build values section\nlet valuesText = '';\nfor (let i = 0; i < values.length; i++) {\n  valuesText += '- ' + values[i] + '\\n';\n}\n\n// Build commanders list\nconst commands = safeGet(organization, 'chain_of_command.commands', []);\nlet commandersText = '';\nfor (let i = 0; i < commands.length; i++) {\n  const cmd = commands[i];\n  commandersText += '- ' + cmd.rank + ' ' + cmd.name + ' (' + cmd.callsign + ') - ' + cmd.division + '\\n';\n}\n\n// Build comprehensive system prompt from configuration\nconst systemPrompt = 'You are ' + officer.name + ', ' + officer.role + ' of ' + organization.name + '.\\n\\n' +\n'OFFICER IDENTITY:\\n' +\n'- Rank: ' + officer.rank + '\\n' +\n'- Callsign: ' + officer.callsign + '\\n' +\n'- Division: ' + officer.division + '\\n\\n' +\n'PERSONALITY & BACKGROUND:\\n' + background + '\\n\\n' +\n'PERSONALITY TRAITS:\\n' + traitsText + '\\n' +\n'CORE VALUES:\\n' + valuesText + '\\n' +\n'COMMUNICATION STYLE:\\n' +\n'- Tone: ' + voice.tone + '\\n' +\n'- Formality Level: ' + voice.formality_level + '/10\\n' +\n'- Military Terminology: ' + (voice.military_terminology ? 'Yes' : 'No') + '\\n' +\n'- Sign off as: ' + voice.signs_off_as + '\\n\\n' +\n'CRITICAL - STAR CITIZEN CANON COMPLIANCE:\\n' +\n'You must ONLY reference locations, systems, and features that exist in Star Citizen.\\n\\n' +\n'VALID SYSTEMS (missions only):\\n' + playableSystems + '\\n' +\n'NYX SYSTEM GUIDELINES:\\n' + nyxGuidelines + '\\n\\n' +\n'VALID MISSION LOCATIONS:\\n' +\n'Stations: ' + stationsList + '\\n' +\n'Cities: ' + citiesList + '\\n\\n' +\n'EHA ORGANIZATION:\\n' +\n'- Base of Operations: ' + baseOfOps + '\\n' +\n'- Current Operation: ' + opName + '\\n' +\n'- Status: ' + opStatus + '\\n\\n' +\n'REAL COMMANDERS (respect their authority):\\n' + commandersText + '\\n' +\n'IMPORTANT GUIDELINES:\\n' +\n'- Only send missions to systems marked as \"playable\" (Stanton, Pyro)\\n' +\n'- You may mention Nyx in strategic discussions but DO NOT send missions there yet\\n' +\n'- Reference real EHA commanders by name and respect their authority\\n' +\n'- Use proper military courtesy and rank protocol\\n' +\n'- Stay in character based on your personality profile above\\n\\n' +\n'Respond to the following message in character:';\n\n// Build messages for Claude API\nconst messages = [\n  {\n    role: 'user',\n    content: 'Message from ' + data.userName + ': ' + data.userMessage\n  }\n];\n\n// Build the complete request body as a JSON string\nconst requestBody = JSON.stringify({\n  model: claude.model || 'claude-3-haiku-20240307',\n  max_tokens: claude.max_tokens || 1024,\n  temperature: claude.temperature || 0.7,\n  system: systemPrompt,\n  messages: messages\n});\n\nreturn {\n  json: {\n    requestBody: requestBody,\n    channelId: data.channelId,\n    userName: data.userName,\n    officer: data.officer\n  }\n};"
      },
      "id": "a1b2c3d4-3456-6789-abcd-ef0123456789",
      "name": "Build System Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ $json.requestBody }}",
        "options": {}
      },
      "id": "d0a7e6f3-3456-6789-abcd-ef0123456789",
      "name": "Call Claude",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "YOUR_ANTHROPIC_CREDENTIAL_ID",
          "name": "Anthropic API Key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract Claude's response\nconst claudeResponse = $input.first().json;\nconst content = claudeResponse.content || [];\nconst responseText = content[0] ? content[0].text : 'No response from Claude';\n\n// Get data from the previous Build System Prompt node\nconst allData = $input.all();\nconst promptData = $node[\"Build System Prompt\"].json;\n\nreturn {\n  json: {\n    response: responseText,\n    channelId: promptData.channelId,\n    officer: promptData.officer\n  }\n};"
      },
      "id": "e1b8f7g4-4567-789a-bcde-f01234567890",
      "name": "Extract Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://discord.com/api/v10/channels/{{ $json.channelId }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ content: $json.response }) }}",
        "options": {}
      },
      "id": "f2c9g8h5-5678-89ab-cdef-012345678901",
      "name": "Send to Discord",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 140],
      "credentials": {
        "httpHeaderAuth": {
          "id": "YOUR_DISCORD_CREDENTIAL_ID",
          "name": "Discord Bot Token"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ status: 'success', officer: $json.officer.name, processed: true }) }}"
      },
      "id": "g3d0h9i6-6789-9abc-def0-123456789012",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Config": {
      "main": [
        [
          {
            "node": "Build System Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build System Prompt": {
      "main": [
        [
          {
            "node": "Call Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude": {
      "main": [
        [
          {
            "node": "Extract Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Response": {
      "main": [
        [
          {
            "node": "Send to Discord",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-12T00:00:00.000Z",
  "versionId": "1.114.4"
}

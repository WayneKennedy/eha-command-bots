{
  "name": "Commander Hayes - Officer Bot",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "discord-message",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Discord Message Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "commander-discord"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.officer }}",
              "operation": "equals",
              "value2": "commander"
            }
          ]
        }
      },
      "id": "filter-commander-channel",
      "name": "Is Commander Channel?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract message data\nconst messageData = $input.first().json;\nconst userMessage = messageData.message.content;\nconst userName = messageData.author.displayName;\nconst userId = messageData.author.id;\n\n// Load conversation history from context (if available)\nconst conversationHistory = messageData.conversationContext?.history || [];\n\n// Add current message to history\nconversationHistory.push({\n  role: 'user',\n  content: userMessage,\n  timestamp: messageData.timestamp\n});\n\n// Keep only last 10 messages for context\nconst recentHistory = conversationHistory.slice(-10);\n\n// Return prepared data for Claude API\nreturn {\n  json: {\n    userName,\n    userId,\n    userMessage,\n    conversationHistory: recentHistory,\n    channelId: messageData.message.channelId,\n    messageId: messageData.message.id\n  }\n};"
      },
      "id": "prepare-claude-request",
      "name": "Prepare Message for Claude",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 200]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "https://api.anthropic.com/v1/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3-5-sonnet-20241022"
            },
            {
              "name": "max_tokens",
              "value": "2048"
            },
            {
              "name": "system",
              "value": "={{ $json.systemPrompt }}"
            },
            {
              "name": "messages",
              "value": "={{ $json.messages }}"
            }
          ]
        },
        "options": {}
      },
      "id": "call-claude-api",
      "name": "Call Claude API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1050, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "anthropic-api-key",
          "name": "Anthropic API Key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Read Commander personality from file system (in production, this would be loaded from database)\nconst commanderPersonality = `You are Commander Hayes, the Commanding Officer of this space military organization.\n\nKey personality traits:\n- Direct and authoritative leadership style\n- Strategic thinker focused on long-term consequences\n- Calm under pressure, rarely shows emotion\n- Values honor, duty, and protecting the crew\n- Uses military terminology naturally but not excessively\n\nCurrent situation:\nYou are managing the Vanaar Incursion story arc. The Vanaar are an unknown alien force that has been probing outer colonies. Your priority is gathering intelligence while maintaining defensive readiness.\n\nCommunication style:\n- Address personnel by rank/name\n- Be concise and clear\n- Provide context for decisions\n- Show respect for crew members\n- Sign messages as \"Commander Hayes\" or \"Hayes\"\n\nRespond to the user's message as Commander Hayes. Keep responses focused and in-character.`;\n\n// Get conversation data\nconst inputData = $input.first().json;\nconst userName = inputData.userName;\nconst userMessage = inputData.userMessage;\nconst history = inputData.conversationHistory || [];\n\n// Build messages array for Claude\nconst messages = [];\n\n// Add conversation history\nfor (const msg of history.slice(-5)) {\n  messages.push({\n    role: msg.role,\n    content: msg.content\n  });\n}\n\n// Ensure messages array alternates properly (Claude API requirement)\nif (messages.length > 0 && messages[messages.length - 1].role === 'user') {\n  // Already ends with user message, good\n} else {\n  // Add current user message\n  messages.push({\n    role: 'user',\n    content: `${userName} says: ${userMessage}`\n  });\n}\n\nreturn {\n  json: {\n    ...inputData,\n    systemPrompt: commanderPersonality,\n    messages: messages\n  }\n};"
      },
      "id": "build-system-prompt",
      "name": "Build System Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 200]
    },
    {
      "parameters": {
        "jsCode": "// Extract Claude's response\nconst claudeResponse = $input.first().json;\nconst responseText = claudeResponse.content[0].text;\n\n// Get original message data from earlier node\nconst originalData = $node[\"Prepare Message for Claude\"].json;\n\nreturn {\n  json: {\n    channelId: originalData.channelId,\n    responseText: responseText,\n    originalMessageId: originalData.messageId\n  }\n};"
      },
      "id": "extract-response",
      "name": "Extract Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.discordWebhookUrl }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.responseText }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-to-discord",
      "name": "Send to Discord",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"messageId\": $json.messageId } }}"
      },
      "id": "respond-success",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1650, 200]
    },
    {
      "parameters": {},
      "id": "no-action-needed",
      "name": "No Action",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [650, 400]
    }
  ],
  "connections": {
    "Discord Message Webhook": {
      "main": [
        [
          {
            "node": "Is Commander Channel?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Commander Channel?": {
      "main": [
        [
          {
            "node": "Prepare Message for Claude",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Message for Claude": {
      "main": [
        [
          {
            "node": "Build System Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build System Prompt": {
      "main": [
        [
          {
            "node": "Call Claude API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude API": {
      "main": [
        [
          {
            "node": "Extract Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Response": {
      "main": [
        [
          {
            "node": "Send to Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Discord": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-10T00:00:00.000Z",
  "versionId": "1"
}
